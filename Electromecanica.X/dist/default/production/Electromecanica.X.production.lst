

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 10 12:41:49 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 2.05
    19                           ; Generated 20/12/2018 GMT
    20                           ; 
    21                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F2550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	idataCOMRAM
    54  007DC3                     __pidataCOMRAM:
    55                           	opt callstack 0
    56                           
    57                           ;initializer for _Last_Open_Contact_State
    58  007DC3  01                 	db	1
    59                           
    60                           	psect	nvCOMRAM
    61  00000F                     __pnvCOMRAM:
    62                           	opt callstack 0
    63  00000F                     _Magnet_State:
    64                           	opt callstack 0
    65  00000F                     	ds	1
    66  0000                     _PORTAbits	set	3968
    67  0000                     _PORTBbits	set	3969
    68  0000                     _TRISB	set	3987
    69  0000                     _TRISAbits	set	3986
    70  0000                     _ADCON1	set	4033
    71                           
    72                           ; #config settings
    73  0000                     
    74                           	psect	cinit
    75  007DDC                     __pcinit:
    76                           	opt callstack 0
    77  007DDC                     start_initialization:
    78                           	opt callstack 0
    79  007DDC                     __initialization:
    80                           	opt callstack 0
    81                           
    82                           ; Initialize objects allocated to COMRAM (1 bytes)
    83                           ; load TBLPTR registers with __pidataCOMRAM
    84  007DDC  0EC3               	movlw	low __pidataCOMRAM
    85  007DDE  6EF6               	movwf	tblptrl,c
    86  007DE0  0E7D               	movlw	high __pidataCOMRAM
    87  007DE2  6EF7               	movwf	tblptrh,c
    88  007DE4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    89  007DE6  6EF8               	movwf	tblptru,c
    90  007DE8  0009               	tblrd		*+	;fetch initializer
    91  007DEA  CFF5 F010          	movff	tablat,__pdataCOMRAM
    92                           
    93                           ; Clear objects allocated to COMRAM (12 bytes)
    94  007DEE  EE00  F001         	lfsr	0,__pbssCOMRAM
    95  007DF2  0E0C               	movlw	12
    96  007DF4                     clear_0:
    97  007DF4  6AEE               	clrf	postinc0,c
    98  007DF6  06E8               	decf	wreg,f,c
    99  007DF8  E1FD               	bnz	clear_0
   100  007DFA                     end_of_initialization:
   101                           	opt callstack 0
   102  007DFA                     __end_of__initialization:
   103                           	opt callstack 0
   104  007DFA  0100               	movlb	0
   105  007DFC  EFE2  F03E         	goto	_main	;jump to C main() function
   106                           
   107                           	psect	bssCOMRAM
   108  000001                     __pbssCOMRAM:
   109                           	opt callstack 0
   110  000001                     _Count_Auto_Close:
   111                           	opt callstack 0
   112  000001                     	ds	4
   113  000005                     _Count_Time_Close:
   114                           	opt callstack 0
   115  000005                     	ds	4
   116  000009                     _End_Stop_Open_State:
   117                           	opt callstack 0
   118  000009                     	ds	1
   119  00000A                     _End_Stop_Close_State:
   120                           	opt callstack 0
   121  00000A                     	ds	1
   122  00000B                     _Open_Contact_State:
   123                           	opt callstack 0
   124  00000B                     	ds	1
   125  00000C                     _Last_Magnet_State:
   126                           	opt callstack 0
   127  00000C                     	ds	1
   128                           
   129                           	psect	dataCOMRAM
   130  000010                     __pdataCOMRAM:
   131                           	opt callstack 0
   132  000010                     _Last_Open_Contact_State:
   133                           	opt callstack 0
   134  000010                     	ds	1
   135                           
   136                           	psect	cstackCOMRAM
   137  00000D                     __pcstackCOMRAM:
   138                           	opt callstack 0
   139  00000D                     ??_Close_Lock:
   140  00000D                     ??_Open_Lock:
   141  00000D                     
   142                           ; 1 bytes @ 0x0
   143  00000D                     	ds	2
   144  00000F                     
   145                           ; 1 bytes @ 0x2
   146 ;;
   147 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   148 ;;
   149 ;; *************** function _main *****************
   150 ;; Defined at:
   151 ;;		line 34 in file "main.c"
   152 ;; Parameters:    Size  Location     Type
   153 ;;		None
   154 ;; Auto vars:     Size  Location     Type
   155 ;;		None
   156 ;; Return value:  Size  Location     Type
   157 ;;                  1    wreg      void 
   158 ;; Registers used:
   159 ;;		wreg, status,2, status,0, cstack
   160 ;; Tracked objects:
   161 ;;		On entry : 0/0
   162 ;;		On exit  : 0/0
   163 ;;		Unchanged: 0/0
   164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   165 ;;      Params:         0       0       0       0       0       0       0       0       0
   166 ;;      Locals:         0       0       0       0       0       0       0       0       0
   167 ;;      Temps:          0       0       0       0       0       0       0       0       0
   168 ;;      Totals:         0       0       0       0       0       0       0       0       0
   169 ;;Total ram usage:        0 bytes
   170 ;; Hardware stack levels required when called:    2
   171 ;; This function calls:
   172 ;;		_Close_Lock
   173 ;;		_Open_Lock
   174 ;; This function is called by:
   175 ;;		Startup code after reset
   176 ;; This function uses a non-reentrant model
   177 ;;
   178                           
   179                           	psect	text0
   180  007DC4                     __ptext0:
   181                           	opt callstack 0
   182  007DC4                     _main:
   183                           	opt callstack 29
   184                           
   185                           ;main.c: 35:     ADCON1 = 0X0F;
   186                           
   187                           ;incstack = 0
   188  007DC4  0E0F               	movlw	15
   189  007DC6  6EC1               	movwf	4033,c	;volatile
   190                           
   191                           ;main.c: 36:     TRISAbits.RA1 = 1;
   192  007DC8  8292               	bsf	3986,1,c	;volatile
   193                           
   194                           ;main.c: 37:     TRISB = 0xE7;
   195  007DCA  0EE7               	movlw	231
   196  007DCC  6E93               	movwf	3987,c	;volatile
   197                           
   198                           ;main.c: 39:     PORTBbits.RB3 = 0;
   199  007DCE  9681               	bcf	3969,3,c	;volatile
   200                           
   201                           ;main.c: 40:     PORTBbits.RB4 = 0;
   202  007DD0  9881               	bcf	3969,4,c	;volatile
   203  007DD2                     l829:
   204                           
   205                           ;main.c: 43:         Close_Lock();
   206  007DD2  EC2E  F03F         	call	_Close_Lock	;wreg free
   207                           
   208                           ;main.c: 44:         Open_Lock();
   209  007DD6  EC63  F03F         	call	_Open_Lock	;wreg free
   210  007DDA  D7FB               	goto	l829
   211  007DDC                     __end_of_main:
   212                           	opt callstack 0
   213                           
   214 ;; *************** function _Open_Lock *****************
   215 ;; Defined at:
   216 ;;		line 62 in file "main.c"
   217 ;; Parameters:    Size  Location     Type
   218 ;;		None
   219 ;; Auto vars:     Size  Location     Type
   220 ;;		None
   221 ;; Return value:  Size  Location     Type
   222 ;;                  1    wreg      void 
   223 ;; Registers used:
   224 ;;		wreg, status,2, status,0, cstack
   225 ;; Tracked objects:
   226 ;;		On entry : 0/0
   227 ;;		On exit  : 0/0
   228 ;;		Unchanged: 0/0
   229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   230 ;;      Params:         0       0       0       0       0       0       0       0       0
   231 ;;      Locals:         0       0       0       0       0       0       0       0       0
   232 ;;      Temps:          2       0       0       0       0       0       0       0       0
   233 ;;      Totals:         2       0       0       0       0       0       0       0       0
   234 ;;Total ram usage:        2 bytes
   235 ;; Hardware stack levels used:    1
   236 ;; Hardware stack levels required when called:    1
   237 ;; This function calls:
   238 ;;		_Closing
   239 ;; This function is called by:
   240 ;;		_main
   241 ;; This function uses a non-reentrant model
   242 ;;
   243                           
   244                           	psect	text1
   245  007EC6                     __ptext1:
   246                           	opt callstack 0
   247  007EC6                     _Open_Lock:
   248                           	opt callstack 29
   249                           
   250                           ;main.c: 63:     Open_Contact_State = PORTBbits.RB2;
   251                           
   252                           ;incstack = 0
   253  007EC6  A481               	btfss	3969,2,c	;volatile
   254  007EC8  D002               	goto	u110
   255  007ECA  0E01               	movlw	1
   256  007ECC  D001               	goto	u116
   257  007ECE                     u110:
   258  007ECE  0E00               	movlw	0
   259  007ED0                     u116:
   260  007ED0  6E0B               	movwf	_Open_Contact_State,c
   261                           
   262                           ;main.c: 64:     _delay((unsigned long)((50)*(20000000/4000.0)));
   263  007ED2  0E02               	movlw	2
   264  007ED4  6E0E               	movwf	(??_Open_Lock+1)& (0+255),c
   265  007ED6  0E45               	movlw	69
   266  007ED8  6E0D               	movwf	??_Open_Lock& (0+255),c
   267  007EDA  0EAA               	movlw	170
   268  007EDC                     u277:
   269  007EDC  2EE8               	decfsz	wreg,f,c
   270  007EDE  D7FE               	bra	u277
   271  007EE0  2E0D               	decfsz	??_Open_Lock& (0+255),f,c
   272  007EE2  D7FC               	bra	u277
   273  007EE4  2E0E               	decfsz	(??_Open_Lock+1)& (0+255),f,c
   274  007EE6  D7FA               	bra	u277
   275                           
   276                           ;main.c: 65:     if(Open_Contact_State == 0 && Last_Open_Contact_State == 1) {
   277  007EE8  500B               	movf	_Open_Contact_State,w,c
   278  007EEA  A4D8               	btfss	status,2,c
   279  007EEC  D086               	goto	l819
   280  007EEE  0410               	decf	_Last_Open_Contact_State,w,c
   281  007EF0  A4D8               	btfss	status,2,c
   282  007EF2  D083               	goto	l819
   283                           
   284                           ;main.c: 66:         _delay((unsigned long)((50)*(20000000/4000.0)));
   285  007EF4  0E02               	movlw	2
   286  007EF6  6E0E               	movwf	(??_Open_Lock+1)& (0+255),c
   287  007EF8  0E45               	movlw	69
   288  007EFA  6E0D               	movwf	??_Open_Lock& (0+255),c
   289  007EFC  0EAA               	movlw	170
   290  007EFE                     u287:
   291  007EFE  2EE8               	decfsz	wreg,f,c
   292  007F00  D7FE               	bra	u287
   293  007F02  2E0D               	decfsz	??_Open_Lock& (0+255),f,c
   294  007F04  D7FC               	bra	u287
   295  007F06  2E0E               	decfsz	(??_Open_Lock+1)& (0+255),f,c
   296  007F08  D7FA               	bra	u287
   297                           
   298                           ;main.c: 67:         End_Stop_Open_State = PORTBbits.RB6;
   299  007F0A  AC81               	btfss	3969,6,c	;volatile
   300  007F0C  D002               	goto	u140
   301  007F0E  0E01               	movlw	1
   302  007F10  D001               	goto	u146
   303  007F12                     u140:
   304  007F12  0E00               	movlw	0
   305  007F14                     u146:
   306  007F14  6E09               	movwf	_End_Stop_Open_State,c
   307                           
   308                           ;main.c: 68:         if(Open_Contact_State == 0 && Last_Open_Contact_State == 1 && End_S
      +                          top_Open_State == 1) {
   309  007F16  500B               	movf	_Open_Contact_State,w,c
   310  007F18  A4D8               	btfss	status,2,c
   311  007F1A  D06F               	goto	l819
   312  007F1C  0410               	decf	_Last_Open_Contact_State,w,c
   313  007F1E  A4D8               	btfss	status,2,c
   314  007F20  D06C               	goto	l819
   315  007F22  0409               	decf	_End_Stop_Open_State,w,c
   316  007F24  A4D8               	btfss	status,2,c
   317  007F26  D069               	goto	l819
   318  007F28                     u170:
   319                           
   320                           ;main.c: 70:                 PORTBbits.RB4 = 1;
   321                           
   322                           ;main.c: 69:             do {
   323  007F28  8881               	bsf	3969,4,c	;volatile
   324                           
   325                           ;main.c: 71:                 End_Stop_Open_State = PORTBbits.RB6;
   326  007F2A  AC81               	btfss	3969,6,c	;volatile
   327  007F2C  D002               	goto	u180
   328  007F2E  0E01               	movlw	1
   329  007F30  D001               	goto	u186
   330  007F32                     u180:
   331  007F32  0E00               	movlw	0
   332  007F34                     u186:
   333  007F34  6E09               	movwf	_End_Stop_Open_State,c
   334                           
   335                           ;main.c: 72:                 Count_Time_Close++;
   336  007F36  0E01               	movlw	1
   337  007F38  2605               	addwf	_Count_Time_Close,f,c
   338  007F3A  0E00               	movlw	0
   339  007F3C  2206               	addwfc	_Count_Time_Close+1,f,c
   340  007F3E  2207               	addwfc	_Count_Time_Close+2,f,c
   341  007F40  2208               	addwfc	_Count_Time_Close+3,f,c
   342                           
   343                           ;main.c: 73:                 if(Count_Time_Close == 850000) {
   344  007F42  0E50               	movlw	80
   345  007F44  1805               	xorwf	_Count_Time_Close,w,c
   346  007F46  E111               	bnz	l801
   347  007F48  0EF8               	movlw	248
   348  007F4A  1806               	xorwf	_Count_Time_Close+1,w,c
   349  007F4C  E10E               	bnz	l801
   350  007F4E  0E0C               	movlw	12
   351  007F50  1807               	xorwf	_Count_Time_Close+2,w,c
   352  007F52  1008               	iorwf	_Count_Time_Close+3,w,c
   353  007F54  A4D8               	btfss	status,2,c
   354  007F56  D009               	goto	l801
   355                           
   356                           ;main.c: 74:                     Count_Time_Close = 0;
   357  007F58  0E00               	movlw	0
   358  007F5A  6E05               	movwf	_Count_Time_Close,c
   359  007F5C  0E00               	movlw	0
   360  007F5E  6E06               	movwf	_Count_Time_Close+1,c
   361  007F60  0E00               	movlw	0
   362  007F62  6E07               	movwf	_Count_Time_Close+2,c
   363  007F64  0E00               	movlw	0
   364  007F66  6E08               	movwf	_Count_Time_Close+3,c
   365                           
   366                           ;main.c: 75:                     break;
   367  007F68  D003               	goto	u200
   368  007F6A                     l801:
   369                           
   370                           ;main.c: 77:             } while(End_Stop_Open_State == 1);
   371  007F6A  0409               	decf	_End_Stop_Open_State,w,c
   372  007F6C  B4D8               	btfsc	status,2,c
   373  007F6E  D7DC               	goto	u170
   374  007F70                     u200:
   375                           
   376                           ;main.c: 78:             PORTBbits.RB4 = 0;
   377  007F70  9881               	bcf	3969,4,c	;volatile
   378                           
   379                           ;main.c: 79:             Count_Time_Close = 0;
   380  007F72  0E00               	movlw	0
   381  007F74  6E05               	movwf	_Count_Time_Close,c
   382  007F76  0E00               	movlw	0
   383  007F78  6E06               	movwf	_Count_Time_Close+1,c
   384  007F7A  0E00               	movlw	0
   385  007F7C  6E07               	movwf	_Count_Time_Close+2,c
   386  007F7E  0E00               	movlw	0
   387  007F80  6E08               	movwf	_Count_Time_Close+3,c
   388                           
   389                           ;main.c: 80:             Magnet_State = PORTAbits.RA1;
   390  007F82  A280               	btfss	3968,1,c	;volatile
   391  007F84  D002               	goto	u210
   392  007F86  0E01               	movlw	1
   393  007F88  D001               	goto	u216
   394  007F8A                     u210:
   395  007F8A  0E00               	movlw	0
   396  007F8C                     u216:
   397  007F8C  6E0F               	movwf	_Magnet_State,c
   398  007F8E                     l805:
   399                           
   400                           ;main.c: 82:                 Count_Auto_Close++;
   401  007F8E  0E01               	movlw	1
   402  007F90  2601               	addwf	_Count_Auto_Close,f,c
   403  007F92  0E00               	movlw	0
   404  007F94  2202               	addwfc	_Count_Auto_Close+1,f,c
   405  007F96  2203               	addwfc	_Count_Auto_Close+2,f,c
   406  007F98  2204               	addwfc	_Count_Auto_Close+3,f,c
   407                           
   408                           ;main.c: 83:                 Magnet_State = PORTAbits.RA1;
   409  007F9A  A280               	btfss	3968,1,c	;volatile
   410  007F9C  D002               	goto	u220
   411  007F9E  0E01               	movlw	1
   412  007FA0  D001               	goto	u226
   413  007FA2                     u220:
   414  007FA2  0E00               	movlw	0
   415  007FA4                     u226:
   416  007FA4  6E0F               	movwf	_Magnet_State,c
   417                           
   418                           ;main.c: 84:                 if(Count_Auto_Close == 1000000) {
   419  007FA6  0E40               	movlw	64
   420  007FA8  1801               	xorwf	_Count_Auto_Close,w,c
   421  007FAA  E11C               	bnz	l815
   422  007FAC  0E42               	movlw	66
   423  007FAE  1802               	xorwf	_Count_Auto_Close+1,w,c
   424  007FB0  E119               	bnz	l815
   425  007FB2  0E0F               	movlw	15
   426  007FB4  1803               	xorwf	_Count_Auto_Close+2,w,c
   427  007FB6  1004               	iorwf	_Count_Auto_Close+3,w,c
   428  007FB8  A4D8               	btfss	status,2,c
   429  007FBA  D014               	goto	l815
   430                           
   431                           ;main.c: 85:                     End_Stop_Open_State = PORTBbits.RB6;
   432  007FBC  AC81               	btfss	3969,6,c	;volatile
   433  007FBE  D002               	goto	u240
   434  007FC0  0E01               	movlw	1
   435  007FC2  D001               	goto	u246
   436  007FC4                     u240:
   437  007FC4  0E00               	movlw	0
   438  007FC6                     u246:
   439  007FC6  6E09               	movwf	_End_Stop_Open_State,c
   440                           
   441                           ;main.c: 86:                     if(End_Stop_Open_State == 0) {
   442  007FC8  5009               	movf	_End_Stop_Open_State,w,c
   443  007FCA  A4D8               	btfss	status,2,c
   444  007FCC  D00E               	goto	u260
   445                           
   446                           ;main.c: 87:                         Closing();
   447  007FCE  EC00  F03F         	call	_Closing	;wreg free
   448                           
   449                           ;main.c: 88:                         Count_Auto_Close = 0;
   450  007FD2  0E00               	movlw	0
   451  007FD4  6E01               	movwf	_Count_Auto_Close,c
   452  007FD6  0E00               	movlw	0
   453  007FD8  6E02               	movwf	_Count_Auto_Close+1,c
   454  007FDA  0E00               	movlw	0
   455  007FDC  6E03               	movwf	_Count_Auto_Close+2,c
   456  007FDE  0E00               	movlw	0
   457  007FE0  6E04               	movwf	_Count_Auto_Close+3,c
   458  007FE2  D003               	goto	u260
   459  007FE4                     l815:
   460                           
   461                           ;main.c: 92:             } while(Magnet_State == 1);
   462  007FE4  040F               	decf	_Magnet_State,w,c
   463  007FE6  B4D8               	btfsc	status,2,c
   464  007FE8  D7D2               	goto	l805
   465  007FEA                     u260:
   466                           
   467                           ;main.c: 93:             Count_Auto_Close = 0;
   468  007FEA  0E00               	movlw	0
   469  007FEC  6E01               	movwf	_Count_Auto_Close,c
   470  007FEE  0E00               	movlw	0
   471  007FF0  6E02               	movwf	_Count_Auto_Close+1,c
   472  007FF2  0E00               	movlw	0
   473  007FF4  6E03               	movwf	_Count_Auto_Close+2,c
   474  007FF6  0E00               	movlw	0
   475  007FF8  6E04               	movwf	_Count_Auto_Close+3,c
   476  007FFA                     l819:
   477                           
   478                           ;main.c: 96:     Last_Open_Contact_State = Open_Contact_State;
   479  007FFA  C00B  F010         	movff	_Open_Contact_State,_Last_Open_Contact_State
   480  007FFE  0012               	return		;funcret
   481  008000                     __end_of_Open_Lock:
   482                           	opt callstack 0
   483                           
   484 ;; *************** function _Close_Lock *****************
   485 ;; Defined at:
   486 ;;		line 49 in file "main.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;		None
   489 ;; Auto vars:     Size  Location     Type
   490 ;;		None
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg, status,2, status,0, cstack
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   500 ;;      Params:         0       0       0       0       0       0       0       0       0
   501 ;;      Locals:         0       0       0       0       0       0       0       0       0
   502 ;;      Temps:          2       0       0       0       0       0       0       0       0
   503 ;;      Totals:         2       0       0       0       0       0       0       0       0
   504 ;;Total ram usage:        2 bytes
   505 ;; Hardware stack levels used:    1
   506 ;; Hardware stack levels required when called:    1
   507 ;; This function calls:
   508 ;;		_Closing
   509 ;; This function is called by:
   510 ;;		_main
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           	psect	text2
   515  007E5C                     __ptext2:
   516                           	opt callstack 0
   517  007E5C                     _Close_Lock:
   518                           	opt callstack 29
   519                           
   520                           ;main.c: 50:     Magnet_State = PORTAbits.RA1;
   521                           
   522                           ;incstack = 0
   523  007E5C  A280               	btfss	3968,1,c	;volatile
   524  007E5E  D002               	goto	u40
   525  007E60  0E01               	movlw	1
   526  007E62  D001               	goto	u46
   527  007E64                     u40:
   528  007E64  0E00               	movlw	0
   529  007E66                     u46:
   530  007E66  6E0F               	movwf	_Magnet_State,c
   531                           
   532                           ;main.c: 51:     _delay((unsigned long)((50)*(20000000/4000.0)));
   533  007E68  0E02               	movlw	2
   534  007E6A  6E0E               	movwf	(??_Close_Lock+1)& (0+255),c
   535  007E6C  0E45               	movlw	69
   536  007E6E  6E0D               	movwf	??_Close_Lock& (0+255),c
   537  007E70  0EAA               	movlw	170
   538  007E72                     u297:
   539  007E72  2EE8               	decfsz	wreg,f,c
   540  007E74  D7FE               	bra	u297
   541  007E76  2E0D               	decfsz	??_Close_Lock& (0+255),f,c
   542  007E78  D7FC               	bra	u297
   543  007E7A  2E0E               	decfsz	(??_Close_Lock+1)& (0+255),f,c
   544  007E7C  D7FA               	bra	u297
   545                           
   546                           ;main.c: 52:     if(Magnet_State == 1 && Last_Magnet_State == 0) {
   547  007E7E  040F               	decf	_Magnet_State,w,c
   548  007E80  A4D8               	btfss	status,2,c
   549  007E82  D01E               	goto	l773
   550  007E84  500C               	movf	_Last_Magnet_State,w,c
   551  007E86  A4D8               	btfss	status,2,c
   552  007E88  D01B               	goto	l773
   553                           
   554                           ;main.c: 53:         _delay((unsigned long)((50)*(20000000/4000.0)));
   555  007E8A  0E02               	movlw	2
   556  007E8C  6E0E               	movwf	(??_Close_Lock+1)& (0+255),c
   557  007E8E  0E45               	movlw	69
   558  007E90  6E0D               	movwf	??_Close_Lock& (0+255),c
   559  007E92  0EAA               	movlw	170
   560  007E94                     u307:
   561  007E94  2EE8               	decfsz	wreg,f,c
   562  007E96  D7FE               	bra	u307
   563  007E98  2E0D               	decfsz	??_Close_Lock& (0+255),f,c
   564  007E9A  D7FC               	bra	u307
   565  007E9C  2E0E               	decfsz	(??_Close_Lock+1)& (0+255),f,c
   566  007E9E  D7FA               	bra	u307
   567                           
   568                           ;main.c: 54:         End_Stop_Open_State = PORTBbits.RB6;
   569  007EA0  AC81               	btfss	3969,6,c	;volatile
   570  007EA2  D002               	goto	u70
   571  007EA4  0E01               	movlw	1
   572  007EA6  D001               	goto	u76
   573  007EA8                     u70:
   574  007EA8  0E00               	movlw	0
   575  007EAA                     u76:
   576  007EAA  6E09               	movwf	_End_Stop_Open_State,c
   577                           
   578                           ;main.c: 55:         if(Magnet_State == 1 && Last_Magnet_State == 0 && End_Stop_Open_Sta
      +                          te == 0) {
   579  007EAC  040F               	decf	_Magnet_State,w,c
   580  007EAE  A4D8               	btfss	status,2,c
   581  007EB0  D007               	goto	l773
   582  007EB2  500C               	movf	_Last_Magnet_State,w,c
   583  007EB4  A4D8               	btfss	status,2,c
   584  007EB6  D004               	goto	l773
   585  007EB8  5009               	movf	_End_Stop_Open_State,w,c
   586  007EBA  B4D8               	btfsc	status,2,c
   587                           
   588                           ;main.c: 56:             Closing();
   589  007EBC  EC00  F03F         	call	_Closing	;wreg free
   590  007EC0                     l773:
   591                           
   592                           ;main.c: 59:     Last_Magnet_State = Magnet_State;
   593  007EC0  C00F  F00C         	movff	_Magnet_State,_Last_Magnet_State
   594  007EC4  0012               	return		;funcret
   595  007EC6                     __end_of_Close_Lock:
   596                           	opt callstack 0
   597                           
   598 ;; *************** function _Closing *****************
   599 ;; Defined at:
   600 ;;		line 99 in file "main.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;		None
   603 ;; Auto vars:     Size  Location     Type
   604 ;;		None
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   614 ;;      Params:         0       0       0       0       0       0       0       0       0
   615 ;;      Locals:         0       0       0       0       0       0       0       0       0
   616 ;;      Temps:          0       0       0       0       0       0       0       0       0
   617 ;;      Totals:         0       0       0       0       0       0       0       0       0
   618 ;;Total ram usage:        0 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; This function calls:
   621 ;;		Nothing
   622 ;; This function is called by:
   623 ;;		_Close_Lock
   624 ;;		_Open_Lock
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text3
   629  007E00                     __ptext3:
   630                           	opt callstack 0
   631  007E00                     _Closing:
   632                           	opt callstack 29
   633                           
   634                           ;main.c: 101:         PORTBbits.RB3 = 1;
   635                           
   636                           ;incstack = 0
   637                           ;main.c: 100:     do {
   638  007E00  8681               	bsf	3969,3,c	;volatile
   639                           
   640                           ;main.c: 102:         End_Stop_Close_State = PORTBbits.RB7;
   641  007E02  AE81               	btfss	3969,7,c	;volatile
   642  007E04  D002               	goto	u10
   643  007E06  0E01               	movlw	1
   644  007E08  D001               	goto	u16
   645  007E0A                     u10:
   646  007E0A  0E00               	movlw	0
   647  007E0C                     u16:
   648  007E0C  6E0A               	movwf	_End_Stop_Close_State,c
   649                           
   650                           ;main.c: 103:         Count_Time_Close++;
   651  007E0E  0E01               	movlw	1
   652  007E10  2605               	addwf	_Count_Time_Close,f,c
   653  007E12  0E00               	movlw	0
   654  007E14  2206               	addwfc	_Count_Time_Close+1,f,c
   655  007E16  2207               	addwfc	_Count_Time_Close+2,f,c
   656  007E18  2208               	addwfc	_Count_Time_Close+3,f,c
   657                           
   658                           ;main.c: 104:         if(Count_Time_Close == 850000) {
   659  007E1A  0E50               	movlw	80
   660  007E1C  1805               	xorwf	_Count_Time_Close,w,c
   661  007E1E  E111               	bnz	l749
   662  007E20  0EF8               	movlw	248
   663  007E22  1806               	xorwf	_Count_Time_Close+1,w,c
   664  007E24  E10E               	bnz	l749
   665  007E26  0E0C               	movlw	12
   666  007E28  1807               	xorwf	_Count_Time_Close+2,w,c
   667  007E2A  1008               	iorwf	_Count_Time_Close+3,w,c
   668  007E2C  A4D8               	btfss	status,2,c
   669  007E2E  D009               	goto	l749
   670                           
   671                           ;main.c: 105:             Count_Time_Close = 0;
   672  007E30  0E00               	movlw	0
   673  007E32  6E05               	movwf	_Count_Time_Close,c
   674  007E34  0E00               	movlw	0
   675  007E36  6E06               	movwf	_Count_Time_Close+1,c
   676  007E38  0E00               	movlw	0
   677  007E3A  6E07               	movwf	_Count_Time_Close+2,c
   678  007E3C  0E00               	movlw	0
   679  007E3E  6E08               	movwf	_Count_Time_Close+3,c
   680                           
   681                           ;main.c: 106:             break;
   682  007E40  D003               	goto	u30
   683  007E42                     l749:
   684                           
   685                           ;main.c: 108:     } while(End_Stop_Close_State == 1);
   686  007E42  040A               	decf	_End_Stop_Close_State,w,c
   687  007E44  B4D8               	btfsc	status,2,c
   688  007E46  D7DC               	goto	_Closing
   689  007E48                     u30:
   690                           
   691                           ;main.c: 109:     PORTBbits.RB3 = 0;
   692  007E48  9681               	bcf	3969,3,c	;volatile
   693                           
   694                           ;main.c: 110:     Count_Time_Close = 0;
   695  007E4A  0E00               	movlw	0
   696  007E4C  6E05               	movwf	_Count_Time_Close,c
   697  007E4E  0E00               	movlw	0
   698  007E50  6E06               	movwf	_Count_Time_Close+1,c
   699  007E52  0E00               	movlw	0
   700  007E54  6E07               	movwf	_Count_Time_Close+2,c
   701  007E56  0E00               	movlw	0
   702  007E58  6E08               	movwf	_Count_Time_Close+3,c
   703  007E5A  0012               	return		;funcret
   704  007E5C                     __end_of_Closing:
   705                           	opt callstack 0
   706  0000                     
   707                           	psect	rparam
   708  0000                     tosu	equ	0xFFF
   709                           tosh	equ	0xFFE
   710                           tosl	equ	0xFFD
   711                           stkptr	equ	0xFFC
   712                           pclatu	equ	0xFFB
   713                           pclath	equ	0xFFA
   714                           pcl	equ	0xFF9
   715                           tblptru	equ	0xFF8
   716                           tblptrh	equ	0xFF7
   717                           tblptrl	equ	0xFF6
   718                           tablat	equ	0xFF5
   719                           prodh	equ	0xFF4
   720                           prodl	equ	0xFF3
   721                           indf0	equ	0xFEF
   722                           postinc0	equ	0xFEE
   723                           postdec0	equ	0xFED
   724                           preinc0	equ	0xFEC
   725                           plusw0	equ	0xFEB
   726                           fsr0h	equ	0xFEA
   727                           fsr0l	equ	0xFE9
   728                           wreg	equ	0xFE8
   729                           indf1	equ	0xFE7
   730                           postinc1	equ	0xFE6
   731                           postdec1	equ	0xFE5
   732                           preinc1	equ	0xFE4
   733                           plusw1	equ	0xFE3
   734                           fsr1h	equ	0xFE2
   735                           fsr1l	equ	0xFE1
   736                           bsr	equ	0xFE0
   737                           indf2	equ	0xFDF
   738                           postinc2	equ	0xFDE
   739                           postdec2	equ	0xFDD
   740                           preinc2	equ	0xFDC
   741                           plusw2	equ	0xFDB
   742                           fsr2h	equ	0xFDA
   743                           fsr2l	equ	0xFD9
   744                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         12
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      2      16
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Close_Lock
    _main->_Open_Lock

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                         _Close_Lock
                          _Open_Lock
 ---------------------------------------------------------------------------------
 (1) _Open_Lock                                            2     2      0       0
                                              0 COMRAM     2     2      0
                            _Closing
 ---------------------------------------------------------------------------------
 (1) _Close_Lock                                           2     2      0       0
                                              0 COMRAM     2     2      0
                            _Closing
 ---------------------------------------------------------------------------------
 (2) _Closing                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Close_Lock
     _Closing
   _Open_Lock
     _Closing

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      2      10       1       16.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      10      20        0.0%
DATA                 0      0      10       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 10 12:41:49 2019

                     u10 7E0A                       u30 7E48                       u16 7E0C  
                     u40 7E64                       u70 7EA8                       u46 7E66  
                     u76 7EAA              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l801 7F6A                      l805 7F8E                      l815 7FE4  
                    l819 7FFA                      l749 7E42                      l773 7EC0  
                    l829 7DD2             __CFG_CPB$OFF 000000                      u110 7ECE  
                    u200 7F70                      u210 7F8A                      u220 7FA2  
                    u140 7F12                      u116 7ED0                      u240 7FC4  
                    u216 7F8C                      u226 7FA4                      u170 7F28  
                    u146 7F14                      u307 7E94                      u260 7FEA  
                    u180 7F32                      u246 7FC6                      u186 7F34  
           __CFG_CPD$OFF 000000                      u277 7EDC                      u287 7EFE  
                    u297 7E72             __CFG_BOR$OFF 000000        _Last_Magnet_State 000C  
                    wreg 000FE8             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     _main 7DC4                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000          __end_of_Closing 7E5C  
           ___param_bank 000000            __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 000D               _Close_Lock 7E5C            __CFG_USBDIV$1 000000  
                  _TRISB 000F93            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  tablat 000FF5                    status 000FD8           __CFG_PBADEN$ON 000000  
        __initialization 7DDC             __end_of_main 7DDC                   ??_main 000F  
          __activetblptr 000000                   _ADCON1 000FC1      _End_Stop_Open_State 0009  
   _End_Stop_Close_State 000A                ??_Closing 000D           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000       __size_of_Open_Lock 013A                   clear_0 7DF4  
            ?_Close_Lock 000D             __pdataCOMRAM 0010                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 7DFA            ___rparam_used 000001  _Last_Open_Contact_State 0010  
         __pcstackCOMRAM 000D        __end_of_Open_Lock 8000               __pnvCOMRAM 000F  
    __size_of_Close_Lock 006A          __CFG_VREGEN$OFF 000000                  _Closing 7E00  
                __Hparam 0000                  __Lparam 0000                  __pcinit 7DDC  
                __ramtop 0800                  __ptext0 7DC4                  __ptext1 7EC6  
                __ptext2 7E5C                  __ptext3 7E00     end_of_initialization 7DFA  
           _Magnet_State 000F                  postinc0 000FEE                _PORTAbits 000F80  
              _PORTBbits 000F81             ??_Close_Lock 000D                _TRISAbits 000F92  
     __end_of_Close_Lock 7EC6       _Open_Contact_State 000B            __pidataCOMRAM 7DC3  
    start_initialization 7DDC                _Open_Lock 7EC6         _Count_Auto_Close 0001  
       __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0001                 ?_Closing 000D  
             ?_Open_Lock 000D         _Count_Time_Close 0005         __CFG_WDTPS$32768 000000  
            ??_Open_Lock 000D         __size_of_Closing 005C                 __Hrparam 0000  
               __Lrparam 0000            __size_of_main 0018    __CFG_CPUDIV$OSC1_PLL2 000000  
